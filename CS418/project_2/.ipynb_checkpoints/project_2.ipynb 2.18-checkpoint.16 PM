{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load libraries\n",
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import numpy as np\n",
    "import statsmodels.formula.api as smf\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn import linear_model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "demographics = pd.read_csv('/Users/sakina/Desktop/project_02/demographics_test.csv')\n",
    "merged_train = pd.read_csv('/Users/sakina/Desktop/project_02/merged_train.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>State</th>\n",
       "      <th>County</th>\n",
       "      <th>FIPS</th>\n",
       "      <th>Total Population</th>\n",
       "      <th>Percent White, not Hispanic or Latino</th>\n",
       "      <th>Percent Black, not Hispanic or Latino</th>\n",
       "      <th>Percent Hispanic or Latino</th>\n",
       "      <th>Percent Foreign Born</th>\n",
       "      <th>Percent Female</th>\n",
       "      <th>Percent Age 29 and Under</th>\n",
       "      <th>Percent Age 65 and Older</th>\n",
       "      <th>Median Household Income</th>\n",
       "      <th>Percent Unemployed</th>\n",
       "      <th>Percent Less than High School Degree</th>\n",
       "      <th>Percent Less than Bachelor's Degree</th>\n",
       "      <th>Percent Rural</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>NV</td>\n",
       "      <td>eureka</td>\n",
       "      <td>32011</td>\n",
       "      <td>1730</td>\n",
       "      <td>98.265896</td>\n",
       "      <td>0.057803</td>\n",
       "      <td>0.462428</td>\n",
       "      <td>0.346821</td>\n",
       "      <td>51.156069</td>\n",
       "      <td>27.109827</td>\n",
       "      <td>15.606936</td>\n",
       "      <td>70000</td>\n",
       "      <td>3.755365</td>\n",
       "      <td>8.415466</td>\n",
       "      <td>83.396513</td>\n",
       "      <td>100.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>TX</td>\n",
       "      <td>zavala</td>\n",
       "      <td>48507</td>\n",
       "      <td>12107</td>\n",
       "      <td>5.798299</td>\n",
       "      <td>0.594697</td>\n",
       "      <td>93.326175</td>\n",
       "      <td>9.193029</td>\n",
       "      <td>49.723301</td>\n",
       "      <td>49.302057</td>\n",
       "      <td>12.480383</td>\n",
       "      <td>26639</td>\n",
       "      <td>11.955168</td>\n",
       "      <td>40.840797</td>\n",
       "      <td>90.869691</td>\n",
       "      <td>38.032029</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>VA</td>\n",
       "      <td>king george</td>\n",
       "      <td>51099</td>\n",
       "      <td>25260</td>\n",
       "      <td>73.804434</td>\n",
       "      <td>16.722090</td>\n",
       "      <td>4.441805</td>\n",
       "      <td>2.505938</td>\n",
       "      <td>50.166271</td>\n",
       "      <td>40.186065</td>\n",
       "      <td>11.868567</td>\n",
       "      <td>84342</td>\n",
       "      <td>6.479939</td>\n",
       "      <td>7.152824</td>\n",
       "      <td>65.540254</td>\n",
       "      <td>73.189450</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>OH</td>\n",
       "      <td>hamilton</td>\n",
       "      <td>39061</td>\n",
       "      <td>805965</td>\n",
       "      <td>66.354867</td>\n",
       "      <td>25.654340</td>\n",
       "      <td>2.890944</td>\n",
       "      <td>5.086945</td>\n",
       "      <td>51.870615</td>\n",
       "      <td>40.779686</td>\n",
       "      <td>14.161657</td>\n",
       "      <td>50399</td>\n",
       "      <td>7.864630</td>\n",
       "      <td>9.873275</td>\n",
       "      <td>64.404446</td>\n",
       "      <td>2.231877</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>TX</td>\n",
       "      <td>austin</td>\n",
       "      <td>48015</td>\n",
       "      <td>29107</td>\n",
       "      <td>63.809393</td>\n",
       "      <td>8.479060</td>\n",
       "      <td>25.502456</td>\n",
       "      <td>9.946061</td>\n",
       "      <td>50.671660</td>\n",
       "      <td>37.351840</td>\n",
       "      <td>17.799842</td>\n",
       "      <td>56681</td>\n",
       "      <td>5.782337</td>\n",
       "      <td>17.579456</td>\n",
       "      <td>79.008391</td>\n",
       "      <td>66.344090</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  State       County   FIPS  Total Population  \\\n",
       "0    NV       eureka  32011              1730   \n",
       "1    TX       zavala  48507             12107   \n",
       "2    VA  king george  51099             25260   \n",
       "3    OH     hamilton  39061            805965   \n",
       "4    TX       austin  48015             29107   \n",
       "\n",
       "   Percent White, not Hispanic or Latino  \\\n",
       "0                              98.265896   \n",
       "1                               5.798299   \n",
       "2                              73.804434   \n",
       "3                              66.354867   \n",
       "4                              63.809393   \n",
       "\n",
       "   Percent Black, not Hispanic or Latino  Percent Hispanic or Latino  \\\n",
       "0                               0.057803                    0.462428   \n",
       "1                               0.594697                   93.326175   \n",
       "2                              16.722090                    4.441805   \n",
       "3                              25.654340                    2.890944   \n",
       "4                               8.479060                   25.502456   \n",
       "\n",
       "   Percent Foreign Born  Percent Female  Percent Age 29 and Under  \\\n",
       "0              0.346821       51.156069                 27.109827   \n",
       "1              9.193029       49.723301                 49.302057   \n",
       "2              2.505938       50.166271                 40.186065   \n",
       "3              5.086945       51.870615                 40.779686   \n",
       "4              9.946061       50.671660                 37.351840   \n",
       "\n",
       "   Percent Age 65 and Older  Median Household Income  Percent Unemployed  \\\n",
       "0                 15.606936                    70000            3.755365   \n",
       "1                 12.480383                    26639           11.955168   \n",
       "2                 11.868567                    84342            6.479939   \n",
       "3                 14.161657                    50399            7.864630   \n",
       "4                 17.799842                    56681            5.782337   \n",
       "\n",
       "   Percent Less than High School Degree  Percent Less than Bachelor's Degree  \\\n",
       "0                              8.415466                            83.396513   \n",
       "1                             40.840797                            90.869691   \n",
       "2                              7.152824                            65.540254   \n",
       "3                              9.873275                            64.404446   \n",
       "4                             17.579456                            79.008391   \n",
       "\n",
       "   Percent Rural  \n",
       "0     100.000000  \n",
       "1      38.032029  \n",
       "2      73.189450  \n",
       "3       2.231877  \n",
       "4      66.344090  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "demographics.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>State</th>\n",
       "      <th>County</th>\n",
       "      <th>FIPS</th>\n",
       "      <th>Total Population</th>\n",
       "      <th>Percent White, not Hispanic or Latino</th>\n",
       "      <th>Percent Black, not Hispanic or Latino</th>\n",
       "      <th>Percent Hispanic or Latino</th>\n",
       "      <th>Percent Foreign Born</th>\n",
       "      <th>Percent Female</th>\n",
       "      <th>Percent Age 29 and Under</th>\n",
       "      <th>Percent Age 65 and Older</th>\n",
       "      <th>Median Household Income</th>\n",
       "      <th>Percent Unemployed</th>\n",
       "      <th>Percent Less than High School Degree</th>\n",
       "      <th>Percent Less than Bachelor's Degree</th>\n",
       "      <th>Percent Rural</th>\n",
       "      <th>Democratic</th>\n",
       "      <th>Republican</th>\n",
       "      <th>Party</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>AZ</td>\n",
       "      <td>apache</td>\n",
       "      <td>4001</td>\n",
       "      <td>72346</td>\n",
       "      <td>18.571863</td>\n",
       "      <td>0.486551</td>\n",
       "      <td>5.947806</td>\n",
       "      <td>1.719515</td>\n",
       "      <td>50.598513</td>\n",
       "      <td>45.854643</td>\n",
       "      <td>13.322091</td>\n",
       "      <td>32460</td>\n",
       "      <td>15.807433</td>\n",
       "      <td>21.758252</td>\n",
       "      <td>88.941063</td>\n",
       "      <td>74.061076</td>\n",
       "      <td>16298</td>\n",
       "      <td>7810</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>AZ</td>\n",
       "      <td>cochise</td>\n",
       "      <td>4003</td>\n",
       "      <td>128177</td>\n",
       "      <td>56.299492</td>\n",
       "      <td>3.714395</td>\n",
       "      <td>34.403208</td>\n",
       "      <td>11.458374</td>\n",
       "      <td>49.069646</td>\n",
       "      <td>37.902276</td>\n",
       "      <td>19.756275</td>\n",
       "      <td>45383</td>\n",
       "      <td>8.567108</td>\n",
       "      <td>13.409171</td>\n",
       "      <td>76.837055</td>\n",
       "      <td>36.301067</td>\n",
       "      <td>17383</td>\n",
       "      <td>26929</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>AZ</td>\n",
       "      <td>coconino</td>\n",
       "      <td>4005</td>\n",
       "      <td>138064</td>\n",
       "      <td>54.619597</td>\n",
       "      <td>1.342855</td>\n",
       "      <td>13.711033</td>\n",
       "      <td>4.825298</td>\n",
       "      <td>50.581614</td>\n",
       "      <td>48.946141</td>\n",
       "      <td>10.873943</td>\n",
       "      <td>51106</td>\n",
       "      <td>8.238305</td>\n",
       "      <td>11.085381</td>\n",
       "      <td>65.791439</td>\n",
       "      <td>31.466066</td>\n",
       "      <td>34240</td>\n",
       "      <td>19249</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>AZ</td>\n",
       "      <td>gila</td>\n",
       "      <td>4007</td>\n",
       "      <td>53179</td>\n",
       "      <td>63.222325</td>\n",
       "      <td>0.552850</td>\n",
       "      <td>18.548675</td>\n",
       "      <td>4.249798</td>\n",
       "      <td>50.296170</td>\n",
       "      <td>32.238290</td>\n",
       "      <td>26.397638</td>\n",
       "      <td>40593</td>\n",
       "      <td>12.129932</td>\n",
       "      <td>15.729958</td>\n",
       "      <td>82.262624</td>\n",
       "      <td>41.062000</td>\n",
       "      <td>7643</td>\n",
       "      <td>12180</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>AZ</td>\n",
       "      <td>graham</td>\n",
       "      <td>4009</td>\n",
       "      <td>37529</td>\n",
       "      <td>51.461536</td>\n",
       "      <td>1.811932</td>\n",
       "      <td>32.097844</td>\n",
       "      <td>4.385942</td>\n",
       "      <td>46.313518</td>\n",
       "      <td>46.393456</td>\n",
       "      <td>12.315809</td>\n",
       "      <td>47422</td>\n",
       "      <td>14.424104</td>\n",
       "      <td>14.580797</td>\n",
       "      <td>86.675944</td>\n",
       "      <td>46.437399</td>\n",
       "      <td>3368</td>\n",
       "      <td>6870</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  State    County  FIPS  Total Population  \\\n",
       "0    AZ    apache  4001             72346   \n",
       "1    AZ   cochise  4003            128177   \n",
       "2    AZ  coconino  4005            138064   \n",
       "3    AZ      gila  4007             53179   \n",
       "4    AZ    graham  4009             37529   \n",
       "\n",
       "   Percent White, not Hispanic or Latino  \\\n",
       "0                              18.571863   \n",
       "1                              56.299492   \n",
       "2                              54.619597   \n",
       "3                              63.222325   \n",
       "4                              51.461536   \n",
       "\n",
       "   Percent Black, not Hispanic or Latino  Percent Hispanic or Latino  \\\n",
       "0                               0.486551                    5.947806   \n",
       "1                               3.714395                   34.403208   \n",
       "2                               1.342855                   13.711033   \n",
       "3                               0.552850                   18.548675   \n",
       "4                               1.811932                   32.097844   \n",
       "\n",
       "   Percent Foreign Born  Percent Female  Percent Age 29 and Under  \\\n",
       "0              1.719515       50.598513                 45.854643   \n",
       "1             11.458374       49.069646                 37.902276   \n",
       "2              4.825298       50.581614                 48.946141   \n",
       "3              4.249798       50.296170                 32.238290   \n",
       "4              4.385942       46.313518                 46.393456   \n",
       "\n",
       "   Percent Age 65 and Older  Median Household Income  Percent Unemployed  \\\n",
       "0                 13.322091                    32460           15.807433   \n",
       "1                 19.756275                    45383            8.567108   \n",
       "2                 10.873943                    51106            8.238305   \n",
       "3                 26.397638                    40593           12.129932   \n",
       "4                 12.315809                    47422           14.424104   \n",
       "\n",
       "   Percent Less than High School Degree  Percent Less than Bachelor's Degree  \\\n",
       "0                             21.758252                            88.941063   \n",
       "1                             13.409171                            76.837055   \n",
       "2                             11.085381                            65.791439   \n",
       "3                             15.729958                            82.262624   \n",
       "4                             14.580797                            86.675944   \n",
       "\n",
       "   Percent Rural  Democratic  Republican  Party  \n",
       "0      74.061076       16298        7810      1  \n",
       "1      36.301067       17383       26929      0  \n",
       "2      31.466066       34240       19249      1  \n",
       "3      41.062000        7643       12180      0  \n",
       "4      46.437399        3368        6870      0  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "merged_train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1195 entries, 0 to 1194\n",
      "Data columns (total 19 columns):\n",
      "State                                    1195 non-null object\n",
      "County                                   1195 non-null object\n",
      "FIPS                                     1195 non-null int64\n",
      "Total Population                         1195 non-null int64\n",
      "Percent White, not Hispanic or Latino    1195 non-null float64\n",
      "Percent Black, not Hispanic or Latino    1195 non-null float64\n",
      "Percent Hispanic or Latino               1195 non-null float64\n",
      "Percent Foreign Born                     1195 non-null float64\n",
      "Percent Female                           1195 non-null float64\n",
      "Percent Age 29 and Under                 1195 non-null float64\n",
      "Percent Age 65 and Older                 1195 non-null float64\n",
      "Median Household Income                  1195 non-null int64\n",
      "Percent Unemployed                       1195 non-null float64\n",
      "Percent Less than High School Degree     1195 non-null float64\n",
      "Percent Less than Bachelor's Degree      1195 non-null float64\n",
      "Percent Rural                            1195 non-null float64\n",
      "Democratic                               1195 non-null int64\n",
      "Republican                               1195 non-null int64\n",
      "Party                                    1195 non-null int64\n",
      "dtypes: float64(11), int64(6), object(2)\n",
      "memory usage: 177.5+ KB\n"
     ]
    }
   ],
   "source": [
    "merged_train.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## TASK 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Partition data into training and validation sets using holdout method\n",
    "X_train, X_val, Y_train, Y_val = train_test_split(merged_train[['FIPS', 'Total Population', 'Percent White, not Hispanic or Latino',\n",
    "                                                                 'Percent Black, not Hispanic or Latino', 'Percent Hispanic or Latino', 'Percent Foreign Born', \n",
    "                                                                 'Percent Female', 'Percent Age 29 and Under', 'Percent Age 65 and Older', 'Median Household Income', \n",
    "                                                                 'Percent Unemployed', 'Percent Less than High School Degree','Percent Less than Bachelor\\'s Degree', \n",
    "                                                                 'Percent Rural']], merged_train[['Democratic', 'Republican', 'Party']], train_size = .80, test_size = .20, \n",
    "                                                    random_state = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 956 entries, 998 to 1061\n",
      "Data columns (total 14 columns):\n",
      "FIPS                                     956 non-null int64\n",
      "Total Population                         956 non-null int64\n",
      "Percent White, not Hispanic or Latino    956 non-null float64\n",
      "Percent Black, not Hispanic or Latino    956 non-null float64\n",
      "Percent Hispanic or Latino               956 non-null float64\n",
      "Percent Foreign Born                     956 non-null float64\n",
      "Percent Female                           956 non-null float64\n",
      "Percent Age 29 and Under                 956 non-null float64\n",
      "Percent Age 65 and Older                 956 non-null float64\n",
      "Median Household Income                  956 non-null int64\n",
      "Percent Unemployed                       956 non-null float64\n",
      "Percent Less than High School Degree     956 non-null float64\n",
      "Percent Less than Bachelor's Degree      956 non-null float64\n",
      "Percent Rural                            956 non-null float64\n",
      "dtypes: float64(11), int64(3)\n",
      "memory usage: 112.0 KB\n",
      "None\n"
     ]
    }
   ],
   "source": [
    "print(X_train.info())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 239 entries, 49 to 775\n",
      "Data columns (total 14 columns):\n",
      "FIPS                                     239 non-null int64\n",
      "Total Population                         239 non-null int64\n",
      "Percent White, not Hispanic or Latino    239 non-null float64\n",
      "Percent Black, not Hispanic or Latino    239 non-null float64\n",
      "Percent Hispanic or Latino               239 non-null float64\n",
      "Percent Foreign Born                     239 non-null float64\n",
      "Percent Female                           239 non-null float64\n",
      "Percent Age 29 and Under                 239 non-null float64\n",
      "Percent Age 65 and Older                 239 non-null float64\n",
      "Median Household Income                  239 non-null int64\n",
      "Percent Unemployed                       239 non-null float64\n",
      "Percent Less than High School Degree     239 non-null float64\n",
      "Percent Less than Bachelor's Degree      239 non-null float64\n",
      "Percent Rural                            239 non-null float64\n",
      "dtypes: float64(11), int64(3)\n",
      "memory usage: 28.0 KB\n",
      "None\n"
     ]
    }
   ],
   "source": [
    "print(X_val.info())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 956 entries, 998 to 1061\n",
      "Data columns (total 3 columns):\n",
      "Democratic    956 non-null int64\n",
      "Republican    956 non-null int64\n",
      "Party         956 non-null int64\n",
      "dtypes: int64(3)\n",
      "memory usage: 29.9 KB\n",
      "None\n"
     ]
    }
   ],
   "source": [
    "print(Y_train.info())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## TASK 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Standardizing training and validation set\n",
    "scaler = StandardScaler()\n",
    "scaler.fit(X_train)\n",
    "X_train_scaled = scaler.transform(X_train)\n",
    "X_val_scaled = scaler.transform(X_val)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## TASK 3"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Building multiple regression model to predict the number of votes cast for the Democratic party"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "R-squared for training set:   0.8756562459653711\n",
      "R-squared for validation set: 0.9082371310230188\n",
      "Adjusted R-squared for training set:   0.8738062857565668\n",
      "Adjusted R-squared for validation set: 0.9025019517119576\n"
     ]
    }
   ],
   "source": [
    "#Using all predictors\n",
    "model = linear_model.LinearRegression()\n",
    "fitted_model1 = model.fit(X_train_scaled, Y_train['Democratic'])\n",
    "\n",
    "#Computing coefficient of determination(R squared) for training and validation sets \n",
    "score_train1 = fitted_model1.score(X_train_scaled, Y_train['Democratic'])\n",
    "score_val1 = fitted_model1.score(X_val_scaled, Y_val['Democratic'])\n",
    "\n",
    "#Computing Adjusted R2 for training and validation set\n",
    "adj_r_squared_train1 = 1 - (1-score_train1)*(len(Y_train)-1)/(len(Y_train) - X_train_scaled.shape[1]-1)\n",
    "adj_r_squared_val1 = 1 - (1-score_val1)*(len(Y_val)-1)/(len(Y_val) - X_val_scaled.shape[1]-1)\n",
    "\n",
    "print(\"R-squared for training set:   \" + str(score_train1))\n",
    "print(\"R-squared for validation set: \" + str(score_val1))\n",
    "\n",
    "print(\"Adjusted R-squared for training set:   \" + str(adj_r_squared_train1)) \n",
    "print(\"Adjusted R-squared for validation set: \" + str(adj_r_squared_val1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[-1.54760491e+03  6.40817239e+04 -3.30030267e+03 -6.97907957e+02\n",
      " -6.68236638e+03  2.69080813e+03 -4.36596380e+01 -3.96219001e+03\n",
      " -1.33771152e+03  3.74973714e+02  3.80786417e+02  3.96400877e+03\n",
      " -9.46588294e+03  6.47200629e+02]\n"
     ]
    }
   ],
   "source": [
    "#Use LASSO regression to see which predictors can be dropped.\n",
    "model = linear_model.Lasso(alpha = 1)\n",
    "fitted_model = model.fit(X_train_scaled, Y_train['Democratic'])\n",
    "print(fitted_model.coef_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[-1.54792939e+03  6.39700378e+04 -3.25911869e+03 -6.55839853e+02\n",
      " -6.64529446e+03  2.75940852e+03 -3.13496241e+01 -3.96031733e+03\n",
      " -1.34851403e+03  3.76894577e+02  3.96267077e+02  3.90509300e+03\n",
      " -9.43590744e+03  6.36404514e+02]\n"
     ]
    }
   ],
   "source": [
    "#Use Ridge regression to see which predictors can be dropped.\n",
    "#Ridge regression alleviates multicollinearity among predictor variables by shrinking \n",
    "#the coeffiecient estimates of highly correlated variables.\n",
    "model = linear_model.Ridge(alpha = 1)\n",
    "fitted_model = model.fit(X_train_scaled, Y_train['Democratic'])\n",
    "print(fitted_model.coef_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "R-squared for training set:            0.8756345703184664\n",
      "Adjusted R-squared for training set:   0.8737842876239483\n",
      "\n",
      "R-squared for validation set:          0.9081562860355087\n",
      "Adjusted R-squared for validation set: 0.902416053912728\n"
     ]
    }
   ],
   "source": [
    "#Using different set of predictors to predict the number of votes cast for the Democratic party\n",
    "#Dropping indices [6,9,10] since the coefficients of those indices are close to 0.\n",
    "model = linear_model.LinearRegression()\n",
    "predictor_indices = [0,1,2,3,4,5,7,8,11,12,13]\n",
    "fitted_model = model.fit(X_train_scaled[:,predictor_indices], Y_train['Democratic'])\n",
    "\n",
    "#Computing coefficient of determination(R squared) for training and validation sets \n",
    "score_train = fitted_model.score(X_train_scaled[:,predictor_indices], Y_train['Democratic'])\n",
    "score_val = fitted_model.score(X_val_scaled[:,predictor_indices], Y_val['Democratic'])\n",
    "\n",
    "#Computing Adjusted R2 for training and validation set\n",
    "adj_r_squared_train = 1 - (1-score_train)*(len(Y_train)-1)/(len(Y_train) - X_train_scaled.shape[1]-1)\n",
    "adj_r_squared_val = 1 - (1-score_val)*(len(Y_val)-1)/(len(Y_val) - X_val_scaled.shape[1]-1)\n",
    "\n",
    "print(\"R-squared for training set:            \" + str(score_train))\n",
    "print(\"Adjusted R-squared for training set:   \" + str(adj_r_squared_train) + \"\\n\")  \n",
    "\n",
    "print(\"R-squared for validation set:          \" + str(score_val))\n",
    "print(\"Adjusted R-squared for validation set: \" + str(adj_r_squared_val)) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "R-squared for training set:            0.8756105955553675\n",
      "Adjusted R-squared for training set:   0.8737599561693687\n",
      "\n",
      "R-squared for validation set:          0.9084590395414787\n",
      "Adjusted R-squared for validation set: 0.902737729512821\n"
     ]
    }
   ],
   "source": [
    "#Using different set of predictors to predict the number of votes cast for the Democratic party\n",
    "#Dropping indices [3,6,9] \n",
    "model = linear_model.LinearRegression()\n",
    "predictor_indices = [0,1,2,4,5,7,8,10,11,12,13]\n",
    "fitted_model = model.fit(X_train_scaled[:,predictor_indices], Y_train['Democratic'])\n",
    "\n",
    "#Computing coefficient of determination(R squared) for training and validation sets \n",
    "score_train = fitted_model.score(X_train_scaled[:,predictor_indices], Y_train['Democratic'])\n",
    "score_val = fitted_model.score(X_val_scaled[:,predictor_indices], Y_val['Democratic'])\n",
    "\n",
    "#Computing Adjusted R2 for training and validation set\n",
    "adj_r_squared_train = 1 - (1-score_train)*(len(Y_train)-1)/(len(Y_train) - X_train_scaled.shape[1]-1)\n",
    "adj_r_squared_val = 1 - (1-score_val)*(len(Y_val)-1)/(len(Y_val) - X_val_scaled.shape[1]-1)\n",
    "\n",
    "print(\"R-squared for training set:            \" + str(score_train))\n",
    "print(\"Adjusted R-squared for training set:   \" + str(adj_r_squared_train) + \"\\n\")  \n",
    "\n",
    "print(\"R-squared for validation set:          \" + str(score_val))\n",
    "print(\"Adjusted R-squared for validation set: \" + str(adj_r_squared_val)) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "#I think we should use dropping [3,6,9] since it gives best R-sq and Adj R-sq. \n",
    "#Let me know what you guys think...\n",
    "\n",
    "#Also I was trying to compute RMSE(Root mean squared error), but it was giving me errors. \n",
    "#I am not sure on how to compute that. We can use that as an evaluation metric too if one of us gets it."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Building multiple regression model to predict the number of votes cast for the Republican party"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "R-squared for training set:   0.8601764376210925\n",
      "R-squared for validation set: 0.825442801216858\n",
      "Adjusted R-squared for training set:   0.8580961720809175\n",
      "Adjusted R-squared for validation set: 0.8145329762929117\n"
     ]
    }
   ],
   "source": [
    "#Using all predictors\n",
    "model = linear_model.LinearRegression()\n",
    "fitted_model1 = model.fit(X_train_scaled, Y_train['Republican'])\n",
    "\n",
    "#Computing coefficient of determination(R squared) for training and validation sets \n",
    "score_train1 = fitted_model1.score(X_train_scaled, Y_train['Republican'])\n",
    "score_val1 = fitted_model1.score(X_val_scaled, Y_val['Republican'])\n",
    "\n",
    "#Computing Adjusted R2 for training and validation set\n",
    "adj_r_squared_train1 = 1 - (1-score_train1)*(len(Y_train)-1)/(len(Y_train) - X_train_scaled.shape[1]-1)\n",
    "adj_r_squared_val1 = 1 - (1-score_val1)*(len(Y_val)-1)/(len(Y_val) - X_val_scaled.shape[1]-1)\n",
    "\n",
    "print(\"R-squared for training set:   \" + str(score_train1))\n",
    "print(\"R-squared for validation set: \" + str(score_val1))\n",
    "\n",
    "print(\"Adjusted R-squared for training set:   \" + str(adj_r_squared_train1)) \n",
    "print(\"Adjusted R-squared for validation set: \" + str(adj_r_squared_val1)) \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training set:\n",
      "[-1290.48554449 38921.35525714  2196.61930338 -2276.51228376\n",
      "  1493.99490852 -4977.64255795  -427.60976417  -893.68476944\n",
      "  2042.89323804  5069.09739533  1898.46206667  3236.46147907\n",
      " -3090.95256194 -5660.69521432]\n"
     ]
    }
   ],
   "source": [
    "#Use LASSO regression to see which predictors can be dropped. \n",
    "model = linear_model.Lasso(alpha = 1)\n",
    "fitted_model1 = model.fit(X_train_scaled, Y_train['Republican'])\n",
    "print(\"Training set:\")\n",
    "print(fitted_model1.coef_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[-1289.74804593 38846.24890181  2191.49110254 -2263.51594138\n",
      "  1482.39884286 -4913.77723259  -418.0155558   -912.43755396\n",
      "  2012.73641618  5046.84743085  1899.93794145  3197.76676013\n",
      " -3085.01492839 -5655.57014574]\n"
     ]
    }
   ],
   "source": [
    "#Use Ridge regression to see which predictors can be dropped.\n",
    "#Ridge regression alleviates multicollinearity among predictor variables by shrinking \n",
    "#the coeffiecient estimates of highly correlated variables.\n",
    "model = linear_model.Ridge(alpha = 1)\n",
    "fitted_model = model.fit(X_train_scaled, Y_train['Republican'])\n",
    "print(fitted_model.coef_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "R-squared for training set:            0.859969795576287\n",
      "Adjusted R-squared for training set:   0.8578864556592499\n",
      "\n",
      "R-squared for validation set:          0.8253072209420018\n",
      "Adjusted R-squared for validation set: 0.8143889222508769\n"
     ]
    }
   ],
   "source": [
    "#Using different set of predictors to predict the number of votes cast for the Republican party\n",
    "#Dropping indices [6,7] since the coefficients of those indices are close to 0.\n",
    "model = linear_model.LinearRegression()\n",
    "predictor_indices = [0,1,2,3,4,5,8,9,10,11,12,13]\n",
    "fitted_model2 = model.fit(X_train_scaled[:,predictor_indices], Y_train['Republican'])\n",
    "\n",
    "#Computing coefficient of determination(R squared) for training and validation sets \n",
    "score_train2 = fitted_model2.score(X_train_scaled[:,predictor_indices], Y_train['Republican'])\n",
    "score_val2 = fitted_model2.score(X_val_scaled[:,predictor_indices], Y_val['Republican'])\n",
    "\n",
    "#Computing Adjusted R2 for training and validation set\n",
    "adj_r_squared_train2 = 1 - (1-score_train2)*(len(Y_train)-1)/(len(Y_train) - X_train_scaled.shape[1]-1)\n",
    "adj_r_squared_val2 = 1 - (1-score_val2)*(len(Y_val)-1)/(len(Y_val) - X_val_scaled.shape[1]-1)\n",
    "\n",
    "print(\"R-squared for training set:            \" + str(score_train2))\n",
    "print(\"Adjusted R-squared for training set:   \" + str(adj_r_squared_train2) + \"\\n\")  \n",
    "\n",
    "print(\"R-squared for validation set:          \" + str(score_val2))\n",
    "print(\"Adjusted R-squared for validation set: \" + str(adj_r_squared_val2)) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "R-squared for training set:            0.8576555694047268\n",
      "Adjusted R-squared for training set:   0.8555377989176558\n",
      "\n",
      "R-squared for validation set:          0.8269780594187519\n",
      "Adjusted R-squared for validation set: 0.816164188132424\n"
     ]
    }
   ],
   "source": [
    "#Using different set of predictors to predict the number of votes cast for the Republican party\n",
    "#Dropping indices [3,7,10]\n",
    "model = linear_model.LinearRegression()\n",
    "predictor_indices = [0,1,2,4,5,6,8,9,11,12,13]\n",
    "fitted_model2 = model.fit(X_train_scaled[:,predictor_indices], Y_train['Republican'])\n",
    "\n",
    "#Computing coefficient of determination(R squared) for training and validation sets \n",
    "score_train2 = fitted_model2.score(X_train_scaled[:,predictor_indices], Y_train['Republican'])\n",
    "score_val2 = fitted_model2.score(X_val_scaled[:,predictor_indices], Y_val['Republican'])\n",
    "\n",
    "#Computing Adjusted R2 for training and validation set\n",
    "adj_r_squared_train2 = 1 - (1-score_train2)*(len(Y_train)-1)/(len(Y_train) - X_train_scaled.shape[1]-1)\n",
    "adj_r_squared_val2 = 1 - (1-score_val2)*(len(Y_val)-1)/(len(Y_val) - X_val_scaled.shape[1]-1)\n",
    "\n",
    "print(\"R-squared for training set:            \" + str(score_train2))\n",
    "print(\"Adjusted R-squared for training set:   \" + str(adj_r_squared_train2) + \"\\n\")  \n",
    "\n",
    "print(\"R-squared for validation set:          \" + str(score_val2))\n",
    "print(\"Adjusted R-squared for validation set: \" + str(adj_r_squared_val2)) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#I think we should use the one with dropping [6,7] just coz I get those indices from regression techniques.\n",
    "#Let me know what u guys think..."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
