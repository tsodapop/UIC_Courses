0x000:                      | 	.pos 0
0x000: 30f40002000000000000 | 	irmovq stack, %rsp
0x00a: 804800000000000000   | 	call main
0x013: 00                   | 	halt
                            | 
                            | # creation of sample linked list per provision
                            | 
0x018:                      | 	.align 8
0x018:                      | 	ele1:
0x018: 2104000000000000     | 		.quad 0x421
0x020: 3800000000000000     | 		.quad ele3
0x028:                      | 	ele2:
0x028: 5703000000000000     | 		.quad 0x357
0x030: 0000000000000000     | 		.quad 0
0x038:                      | 	ele3:
0x038: 7508000000000000     | 		.quad 0x875
0x040: 2800000000000000     | 		.quad ele2
                            | 
                            | #main function
                            | 
0x048:                      | main:
0x048: 30f71800000000000000 | 	irmovq ele1, %rdi		 # move ele1, first node, into rdi register
0x052: 30f00000000000000000 | 	irmovq $0, %rax
0x05c: 806600000000000000   | 	call rsum_list
0x065: 90                   | 	ret
                            | 
                            | #sum_list(node *ele1)
                            | #start in %rdi, return will be in %rax
                            | 
0x066:                      | rsum_list:
0x066: 50970000000000000000 | 	mrmovq (%rdi), %r9		#store in a new register
0x070: a09f                 | 	pushq %r9			#push this value onto the stack 
0x072: 30fa0800000000000000 | 	irmovq $8, %r10			#set r10 equal to 8 for displacement
0x07c: 60a7                 | 	addq %r10, %rdi			#displace rdi to get to the next node pointer
0x07e: 708700000000000000   | 	jmp test
0x087:                      | test:	
0x087: 50770000000000000000 | 	mrmovq (%rdi), %rdi
0x091: 30fb0000000000000000 | 	irmovq $0, %r11			#move 0 for testing
0x09b: 61b7                 | 	subq %r11, %rdi			#subtract 0 from the next node pointerr	
0x09d: 73af00000000000000   | 	je complete			#begin set of recursive call end, otherwise continue to call rsum_list
0x0a6: 806600000000000000   | 	call rsum_list
                            | 
0x0af:                      | complete:
0x0af: b09f                 | 	popq %r9			#pop off the top value into r9 and add to sum on rax
0x0b1: 6090                 | 	addq %r9, %rax
0x0b3: 90                   | 	ret
                            | 
                            | #stack starts here and goes to lower addresses
0x200:                      | 	.pos 0x200
0x200:                      | stack:
