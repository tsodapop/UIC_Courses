0x000:                      | 	.pos 0
0x000: 30f40002000000000000 | 	irmovq stack, %rsp
0x00a: 805300000000000000   | 	call main
0x013: 00                   | 	halt
                            | 
                            | #provided information here for testing
0x01b:                      | 	.align 9
                            | 	#source block
0x01b:                      | 	src:
0x01b: 2104000000000000     | 		.quad 0x421
0x023: 5703000000000000     | 		.quad 0x357
0x02b: 7508000000000000     | 		.quad 0x875
                            | 	#destination block
0x033:                      | 	dest:
0x033: 1101000000000000     | 		.quad 0x111
0x03b: 2202000000000000     | 		.quad 0x222
0x043: 3303000000000000     | 		.quad 0x333
0x04b:                      | 	length:
0x04b: 0300000000000000     | 		.quad 0x3
                            | #main function
                            | 
0x053:                      | main:
0x053: 30f71b00000000000000 | 	irmovq src, %rdi		 # move src into rdi register
0x05d: 30f63300000000000000 | 	irmovq dest, %rsi		 # move dest into rsi register
0x067: 30f24b00000000000000 | 	irmovq length, %rdx 		 # the case for just 3 blocks
0x071: 30f00000000000000000 | 	irmovq $0, %rax
0x07b: 808500000000000000   | 	call copy_block
0x084: 90                   | 	ret
                            | 
                            | #function copy_block(long *src, long *dest, long len)
                            | #start in %rdi, return will be in %rax
                            | 
0x085:                      | copy_block:
0x085: 30f90800000000000000 | 	irmovq $8, %r9 		#displacement of 8 into r9
0x08f: 30fa0100000000000000 | 	irmovq $1, %r10		#subtracting for each block we use
0x099: 80a300000000000000   | 	call whileloop
0x0a2: 90                   | 	ret
0x0a3:                      | whileloop:
0x0a3: 50870000000000000000 | 	mrmovq (%rdi), %r8	#move src to val
0x0ad: 6097                 | 	addq %r9, %rdi		#update rdi to be next byte (update src++)
0x0af: 40860000000000000000 | 	rmmovq %r8, (%rsi)	#move dest = val
0x0b9: 6096                 | 	addq %r9, %rsi		#update rsi to be next byte (update dest++)
0x0bb: 6380                 | 	xorq %r8, %rax			
0x0bd: 61a2                 | 	subq %r10, %rdx		#subtract 1 from the counter of how many blocks
0x0bf: 74a300000000000000   | 	jne whileloop		
0x0c8: 90                   | 	ret
                            | 
                            | 
                            | #stack starts here and goes to lower addresses
0x200:                      | 	.pos 0x200
0x200:                      | stack:
